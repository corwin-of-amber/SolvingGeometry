// Declarations
.decl Vpar(ray:symbol, vec:symbol)
.input Vpar

.decl MakeCircle(center: symbol, radius: symbol)
.output MakeCircle
.decl Circle(center: symbol, radius: symbol, id:symbol)
.input Circle
.decl Dist(a: symbol, b: symbol, d:symbol)

.decl Diameter(c:symbol, id:symbol)
.decl Radius(c:symbol, id:symbol)

.decl Segment(a:symbol, b:symbol, ab:symbol)

.decl MakePerpBisect(a:symbol, b:symbol)
.output MakePerpBisect
.decl PerpBisect(a:symbol, b:symbol, id:symbol)
.input PerpBisect
  
.decl Angle(a:symbol, b:symbol, c:symbol, angle:symbol)
.decl AngleCcw(a:symbol, b:symbol, c:symbol, angle:symbol)
.decl AngleCcwRays(ray0:symbol, ray1:symbol, angle:symbol)

.decl Perp(l1:symbol, l2:symbol)

.decl NotColinear(a:symbol, b:symbol, c:symbol)

.decl MakeRaythru(a:symbol, b:symbol)
.output MakeRaythru
.decl Raythru(a:symbol, b:symbol, id:symbol)
.input Raythru

.decl MakeExtendRay(ray:symbol)
.output MakeExtendRay
.decl ExtendRay(ray: symbol, id:symbol)
.input ExtendRay

.decl Origin(ray:symbol, a:symbol)

.decl MakeMinus(a:symbol, b:symbol)
.output MakeMinus

.decl Minus(a:symbol, b:symbol, id:symbol)
.input Minus

.decl Vopp(u:symbol, v:symbol)

.decl AngleCcwVecs(u0:symbol,  u1:symbol, angle:symbol)

//TODO: Should I delete this?
.decl MakeLine(a:symbol, b:symbol)
.output MakeLine

.decl MakeLinethru(x:symbol, y:symbol)
.output MakeLinethru
.decl Linethru(x:symbol, y:symbol, l:symbol)
.input Linethru
.decl Tg(l:symbol, c:symbol)
.decl Center(c:symbol, o:symbol)

// x * y = z
.decl Prod(x:symbol, y:symbol, z:symbol)

.decl MakeIntersection(locus1: symbol, locus2: symbol)
.output MakeIntersection
.decl Intersection(locus1: symbol, locus2: symbol, id: symbol)
.input Intersection

//.decl SubsetOf(subset:symbol, superset:symbol)

.decl In(point: symbol, locus: symbol)
.input In
.output In

.decl MakeKnown(a: symbol)
.output MakeKnown
.decl Known(a: symbol)
.input Known
.output Known

// ApplyN is apply with N parameters
.decl  MakeApply1(id:symbol, str:symbol, a:symbol)
.output MakeApply1
.decl  MakeApply2(id:symbol, str:symbol, a:symbol, b:symbol)
.output MakeApply2
.decl  MakeApply3(id:symbol, str:symbol, a:symbol, b:symbol, c:symbol)
.output MakeApply3

.decl Dimension(id: symbol, dim: number)
.output Dimension

.decl KnownDimension(id: symbol, dim: number)
.output KnownDimension

.decl TypeOf(type:symbol, id:symbol)
.input TypeOf


// -- Circle --
MakeCircle(a, d):- Dist(a, _, d).

// TODO: Why is this correct?
MakeKnown(c):-TypeOf("circle", c), Diameter(c, d), Known(d).
MakeApply1(c, "circle-from-diameter", d):-!Known(c), TypeOf("circle", c), Diameter(c, d), Known(d).

Dist(o, a, r):-TypeOf("circle", c), Center(c, o), In(a, c), Radius(c, r).
MakeKnown(o):-TypeOf("circle", c), Center(c, o), Known(c).
MakeApply1(o, "circle-center", c):-!Known(o), TypeOf("circle", c), Center(c, o), Known(c).
TypeOf("circle", c), Center(c, o), Radius(c, r):-Circle(o, r, c).
Diameter(c, s):-TypeOf("circle", c), In(a, c), In(b, c), Center(c, o), Segment(a, b, s), In(o, s).
In(a, c), In(b, c):-Diameter(c, s), Segment(a, b, s).
Angle(a, d, b, "90"):-TypeOf("circle", c), Diameter(c, s), Segment(a, b, s), In(d, c), d!=a, d!=b.

// -- Segment --
MakeKnown(dist):-Known(a), Known(b), Dist(a, b, dist).
MakeApply2(dist, "dist", a, b):-!Known(dist),Known(a), Known(b), Dist(a, b, dist).
MakeKnown(ab):-Segment(a, b, ab), Known(a), Known(b).
MakeApply2(ab, "segment", a, b):-!Known(ab), Segment(a, b, ab), Known(a), Known(b).

TypeOf("segment", ab):-Segment(_, __, ab).

MakePerpBisect(a, b):-Dist(a, c, d), Dist(b, c, d), a!=b.
In(c, id):-PerpBisect(a, b, id), Dist(a, c, d), Dist(b, c, d).

MakeRaythru(a, b):-!Raythru(a, b,_), In(__, ab), Segment(a, b, ab).
In(c, ray):-In(c,ab), Segment(a, b, ab), Raythru(a, b, ray).

TypeOf("line", l):-PerpBisect(_, __, l).
MakeKnown(l):-Known(a), Known(b), PerpBisect(a, b, l).
//TODO: Use the right apply term
MakeApply2(l, "perp_bisect-0", a, b):-!Known(l),Known(a), Known(b), PerpBisect(a, b, l).


// -- Angle --
MakeRaythru(b,a):-AngleCcw(a, b, _, __).
MakeRaythru(b,c):-AngleCcw(_, b, c, __).
AngleCcwRays(ray0, ray1, angle):-AngleCcw(a, b, c, angle), Raythru(b,a,ray0), Raythru(b,c,ray1).
MakeKnown(angle):-AngleCcw(a, b, c, angle), Known(a), Known(b), Known(c).
MakeApply3(angle, "angleCcw", a, b, c):-!Known(angle), AngleCcw(a, b, c, angle), Known(a), Known(b), Known(c).

// TODO: Should I add this rule for AngleCcw and AngleCw as well?
MakeRaythru(b, a):-Angle(a, b, _,  __).
MakeRaythru(b, c):-Angle(_, b, c,  __).
        
// Notice this rule wasnt at Shachar's code
Perp(r1, r2):-Angle(a,b,c,"90"), TypeOf("ray", r1), TypeOf("ray", r2), In(a, r1), In(c, r2), Origin(r1, b), Origin(r2, b).

Perp(l1, l2):-Angle(a,b,c,"90"), TypeOf("line", l1), TypeOf("line", l2), In(a, l1), In(c, l2), In(b, l1), In(b, l2).
//TODO: Search for places where I forgot the !=

//TODO: Why is it Perp(v,u), and there isn't Perp(u,v)?
MakeKnown(v):-Perp(u, v), TypeOf("vec", v), Known(u).
MakeApply1(v, "orth", u):-!Known(v), Perp(u, v), TypeOf("vec", v), Known(u).

// Note shachar wrote: @ hmm not so much.. what if d=180 or d=0?
NotColinear(a,b,c):-AngleCcw(a,b,c,d), d!="0", d!="180".
NotColinear(a,b,c):-Angle(a,b,c,d), d!="0", d!="180".

// -- Ray --
// raythru definition
TypeOf("ray", ray), MakeMinus(a, b):-Raythru(a, b, ray).
TypeOf("vec", vec):-Minus(_, __, vec).
Vpar(ray, vec):-Minus(a, b, vec), Raythru(a, b, ray).
Origin(ray, a),In(a, ray), In(b, ray):-Raythru(a, b, ray).

MakeMinus(x, y):-TypeOf("ray", ray), In(x, ray), In(y, ray), x!=y.
Vpar(ray, vec):-Minus(x, y, vec), TypeOf("ray", ray), In(x, ray), In(y, ray), x!=y.

MakeKnown(ray):-TypeOf("ray", ray), Origin(ray, a), Vpar(ray, u), Known(a), Known(u).
MakeApply2(ray, "rayvec", a, u):-!Known(ray),TypeOf("ray", ray), Origin(ray, a), Vpar(ray, u), Known(a), Known(u).

//ray vopp (Notice its a bit different than the original rule, maybe I should add a Ray relation?)
Vopp(u,v):-Raythru(a, b, ray0), Raythru(b, a, ray1), Vpar(ray0, u), Vpar(ray1, v).

//ray-rotate(ccw)
AngleCcwVecs(u0, u1, angle):-TypeOf("ray", ray0), TypeOf("ray", ray1), AngleCcwRays(ray0, ray1, angle), Vpar(ray0, u0), Vpar(ray1, u1).

MakeKnown(u):-Vopp(u,v), TypeOf(u, "vec"), Known(v).
MakeApply1(u, "voppNegate", v):-!Known(u), Vopp(u,v), TypeOf(u, "vec"), Known(v).

//rotate(ccw)-1
MakeKnown(v):-AngleCcwVecs(u, v, angle), TypeOf("vec", v), Known(u), Known(angle).
MakeApply2(v, "rotateCcw", u, angle):-!Known(v), AngleCcwVecs(u, v, angle), TypeOf("vec", v), Known(u), Known(angle).
MakeKnown(u):-AngleCcwVecs(u, v, angle), TypeOf("vec", u), Known(v), Known(angle).
MakeApply2(u, "rotateCw", v, angle):-!Known(u), AngleCcwVecs(u, v, angle), TypeOf("vec", u), Known(v), Known(angle).

MakeExtendRay(ray):-TypeOf("ray", ray).
Perp(line0, line1):-Perp(ray0, ray1),  TypeOf("ray", ray0), TypeOf("ray", ray1), ExtendRay(ray0, line0), ExtendRay(ray1, line1).
Vpar(l, u):-Vpar(ray, u),  TypeOf("ray", ray), ExtendRay(ray, l).
TypeOf("line", l):-ExtendRay(_, l).

// -- Line --
//Notice:  this wasnt originally at Shachar
Perp(u, v):-Perp(r0, r1), Vpar(r0, u), Vpar(r1, v), TypeOf("ray", r0), TypeOf("ray", r1).

Perp(u, v):-Perp(l0, l1), Vpar(l0, u), Vpar(l1, v), TypeOf("line", l0), TypeOf("line", l1).

TypeOf("line", l), In(x, l), In(y, l):-Linethru(x, y, l).

MakeKnown(l):-TypeOf("line", l), In(a, l), Vpar(l, u), Known(a), Known(u).
MakeApply2(l, "linevec", a, u):-!Known(l), TypeOf("line", l), In(a, l), Vpar(l, u), Known(a), Known(u).

// TODO: What if there aren't two points on the line?
MakeMinus(a, b):-TypeOf("line", l), In(a, l), In(b, l), a!=b.
Vpar(l, vec):-Minus(a, b, vec), TypeOf("line", l), In(a, l), In(b, l).

// -- Tangent --
MakeLinethru(o, p):-TypeOf("line", l), Tg(l, c), TypeOf("circle", c), In(p,  c), In(p, l), Center(c, o).
Perp(l, radius):-TypeOf("line", l), Tg(l, c), TypeOf("circle", c), In(p, c), In(p, l), Center(c, o), Linethru(o, p, radius).

// -- Arithmetics rules --
Dist(a, b, d):- Dist(b, a, d).
MakeKnown(x):-Prod(x, y, z), Known(y), Known(z).
MakeApply2(x, "/", y, z):-!Known(x), Prod(x, y, z), Known(y), Known(z).
MakeKnown(z):-Prod(x, y, z), Known(x), Known(y).
MakeApply2(z, "*", x, y):-!Known(z), Prod(x, y, z), Known(x), Known(y).

MakeKnown(x):-x=y, Known(y).
MakeApply1(x, "id",  y):-!Known(x), x=y, Known(y).


// Create intersections only between objects that aren't both from dimension 0
MakeIntersection(c1, c2):-In(b, c1), In(b, c2), c1!=c2, !(Dimension(c1, 0); Dimension(c2, 0)).
//MakeIntersection(c1, c2):-In(b, c1), In(b, c2), c1!=c2,!SubsetOf(c1,c2), !SubsetOf(c2, c1).
//!(SubsetOf(l, c1); SubsetOf(l , c2)).
  
//SubsetOf(subset, superset):-Intersection(_, superset, subset).
//SubsetOf(subset, superset):-Intersection(superset, _, subset).
//SubsetOf(subset, superset):-SubsetOf(subset, l), SubsetOf(l, superset).

In(b, c):- Dist(b, a, d), Circle(a, d, c).
In(b, i):-In(b, c1), In(b, c2), Intersection(c1, c2, i).
  

MakeKnown(c):- Circle(a, d, c), Known(a), Known(d).
MakeApply2(c, "circle", a, d):-!Known(c), Circle(a, d, c), Known(a), Known(d).

MakeKnown(i):- Known(c1), Known(c2), Intersection(c1, c2, i).
MakeApply2(i, "intersection", c1, c2):-!Known(i), Known(c1), Known(c2), Intersection(c1, c2, i).

MakeKnown(vec):-Minus(a, b, vec), Known(a), Known(b).
MakeApply2(vec, "vecFrom2Points", a, b):-!Known(vec),Minus(a, b, vec), Known(a), Known(b).


Dimension(i, 1):-Segment(_, __, i).
Dimension(i, 1):-TypeOf("line", i).
Dimension(i, 1):-Circle(_, __, i).
Dimension(i, 1):-TypeOf("ray", i).
Dimension(i, 0):-Intersection(a, b, i), Dimension(a, 1), Dimension(b, 1), a!= b.
Dimension(i, 1):-PerpBisect(_, __, i).

KnownDimension(id, dim):-Dimension(id, dim), Known(id).
