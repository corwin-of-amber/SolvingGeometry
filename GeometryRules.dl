// Declarations
.decl Vpar(ray:symbol, vec:symbol)
.input Vpar

.decl MakeCircle(center: symbol, radius: symbol)
.output MakeCircle
.decl Circle(center: symbol, radius: symbol, id:symbol)
.input Circle
  
  
.decl Angle(a:symbol, b:symbol, c:symbol, angle:symbol)
.decl AngleCcw(a:symbol, b:symbol, c:symbol, angle:symbol)
.decl AngleCcwRays(ray0:symbol, ray1:symbol, angle:symbol)

.decl Perp(l1:symbol, l2:symbol)

//.decl MakeRay(origin:symbol, direction:symbol)
//.output MakeRay
//.decl Ray(origin:symbol, direction:symbol, id:symbol)
//.input Ray

.decl MakeRaythru(a:symbol, b:symbol)
.output MakeRaythru
.decl Raythru(a:symbol, b:symbol, id:symbol)
.input Raythru

.decl Origin(ray:symbol, a:symbol)

.decl MakeMinus(a:symbol, b:symbol)
.output MakeMinus

.decl Minus(a:symbol, b:symbol, id:symbol)
.input Minus

.decl AngleCcwVecs(u0:symbol,  u1:symbol, angle:symbol)

//TODO: Should I delete this?
.decl MakeLine(a:symbol, b:symbol)
.output MakeLine

.decl Dist(a: symbol, b: symbol, d:symbol)

.decl MakeIntersection(locus1: symbol, locus2: symbol)
.output MakeIntersection
.decl Intersection(locus1: symbol, locus2: symbol, id: symbol)
.input Intersection

//.decl SubsetOf(subset:symbol, superset:symbol)

.decl In(point: symbol, locus: symbol)
.input In
.output In

.decl Known(a: symbol)
.input Known
.output Known

// ApplyN is apply with N parameters
.decl  Apply2(id:symbol, str:symbol, a:symbol, b:symbol)
.output Apply2
.decl  Apply3(id:symbol, str:symbol, a:symbol, b:symbol, c:symbol)
.output Apply3

.decl Dimension(id: symbol, dim: number)
.output Dimension

.decl KnownDimension(id: symbol, dim: number)
.output KnownDimension

.decl TypeOf(type:symbol, id:symbol)
.input TypeOf


// -- Circle --
MakeCircle(a, d):- Dist(a, _, d).

// -- Angle --
MakeRaythru(b,a):-AngleCcw(a, b, _, __).
MakeRaythru(b,c):-AngleCcw(_, b, c, __).
AngleCcwRays(ray0, ray1, angle):-AngleCcw(a, b, c, angle), Raythru(b,a,ray0), Raythru(b,c,ray1).
Apply3(angle, "AngleCcw", a, b, c), Known(angle):-AngleCcw(a, b, c, angle), Known(a), Known(b), Known(c).
        
Perp(l1, l2):-Angle(a,b,c,"90"), TypeOf("line", l1), TypeOf("line", l2), In(a, l1), In(c, l2), In(b, l1), In(b, l2).
// Is this a good rule? maybe change to this:
// R("perp(u,v) & typeof(v,[:vec*R:]) & Known(u)", "Known(v)", title="orth")
//TODO: Change this rule (it isn't in shachar rules)
Known(l):-Known(l2),(Perp(l, l2);Perp(l2, l)).

// -- Ray --
// raythru definition
TypeOf("ray", ray), MakeMinus(a, b):-Raythru(a, b, ray).
Vpar(ray, vec):-Minus(a, b, vec), Raythru(a, b, ray).
Origin(ray, a),In(a, ray), In(b, ray):-Raythru(a, b, ray).

Apply2(ray, "Rayvec", a, u), Known(ray):-TypeOf("ray", ray), Origin(ray, a), Vpar(ray, u), Known(a), Known(u).

//ray-rotate(ccw)
AngleCcwVecs(u0, u1, angle):-TypeOf("ray", ray0), TypeOf("ray", ray1), AngleCcwRays(ray0, ray1, angle), Vpar(ray0, u0), Vpar(ray1, u1).


//R("angle_ccw_vecs(u,v,a) & typeof(v,[:vec*R+:]) & known(u) & known(a)",
//  "known(v)", title="rotate(ccw)-1"),
//rotate(ccw)-1
Apply2(v, "Rotate(ccw)", u, angle), Known(v):-AngleCcwVecs(u, v, angle), Vpar(_, v), Known(u), Known(angle). //TODO: consider using typeof instead of vpar (since vector isn't necessary vpar)
//R("angle_ccw_vecs(u,v,a) & typeof(u,[:vec*R+:]) & known(v) & known(a)",
//  "known(u)", title="rotate(ccw)-0"),
Apply2(u, "Rotate(cw)", v, angle), Known(u):-AngleCcwVecs(u, v, angle), Vpar(_, u), Known(v), Known(angle). //TODO: same here

// -- Arithmetics rules --
Dist(a, b, d):- Dist(b, a, d).

// Create intersections only between objects that aren't both from dimension 0
MakeIntersection(c1, c2):-In(b, c1), In(b, c2), c1!=c2, !(Dimension(c1, 0); Dimension(c2, 0)).
//MakeIntersection(c1, c2):-In(b, c1), In(b, c2), c1!=c2,!SubsetOf(c1,c2), !SubsetOf(c2, c1).
//!(SubsetOf(l, c1); SubsetOf(l , c2)).
  
//SubsetOf(subset, superset):-Intersection(_, superset, subset).
//SubsetOf(subset, superset):-Intersection(superset, _, subset).
//SubsetOf(subset, superset):-SubsetOf(subset, l), SubsetOf(l, superset).

In(b, c):- Dist(b, a, d), Circle(a, d, c).
In(b, i):-In(b, c1), In(b, c2), Intersection(c1, c2, i).
  

Apply2(c, "Circle", a, d), Known(c):- Circle(a, d, c), Known(a), Known(d).
Apply2(c, "Circle", a, d), Known(c):- Circle(a, d, c), Known(a), Known(d).
Apply2(i, "Intersection", c1, c2), Known(i):- Known(c1), Known(c2), Intersection(c1, c2, i).
Apply2(dist, "Dist", a, b), Known(dist):-Known(a), Known(b), Dist(a, b, dist).
Apply2(vec, "Vec", a, b), Known(vec):-Minus(a, b, vec), Known(a), Known(b).


Dimension(i, 1):-TypeOf("line", i).
Dimension(i, 1):-Circle(_, __, i).
Dimension(i, 1):-TypeOf("ray", i).
Dimension(i, 0):-Intersection(a, b, i), Dimension(a, 1), Dimension(b, 1), a!= b.

KnownDimension(id, dim):-Dimension(id, dim), Known(id).
