.decl Dist(a: symbol, b: symbol, d:symbol)
Dist(a, b, d):- Dist(b, a, d).
.input Dist

.decl MakeCircle(center: symbol, radius: symbol)
MakeCircle(a, d):- Dist(a, _, d).
  
.output MakeCircle
   
.decl Circle(center: symbol, radius: symbol, id:symbol)
.input Circle
.output Circle
  
.output In
  
  
.decl MakeIntersection(locus1: symbol, locus2: symbol)
// Note: added some conditions to prevent infinite recursion  (perhaps should do it from the outside)
MakeIntersection(c1, c2):-In(b, c1), In(b, c2), c1!=c2, !Intersection(c1,_,c2), !Intersection(c2, _, c1), !Intersection(_, c1, c2), !Intersection(_, c2, c1).
  
.output MakeIntersection
  
  
.decl Intersection(locus1: symbol, locus2: symbol, id: symbol)
.input Intersection
//Intersection("circ1", "circ2", "i1").
//Intersection("circ2", "circ1", "i2").

.decl In(point: symbol, locus: symbol)
In(b, c):- Dist(b, a, d), Circle(a, d, c).
In(b, i):-In(b, c1), In(b, c2), Intersection(c1, c2, i).
  
.decl Known(a: symbol)
Known(c):- Circle(a, d, c), Known(a), Known(d).
Known(i):- Known(c1), Known(c2), Intersection(c1, c2, i).
.input Known

.decl Dimension1(id: symbol)
Dimension1(i):-Circle(_, __, i).
.output Dimension1

.decl Dimension0(id: symbol)
Dimension0(i):-Intersection(a, b, i), Dimension1(a), Dimension1(b), a!= b.
.output Dimension0